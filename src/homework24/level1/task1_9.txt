1. Что такое Pattern и Matcher?
    Pattern и Matcher - это два класса в Java, используемые для работы с регулярными выражениями.
Pattern представляет компилированное регулярное выражение, а Matcher используется для выполнения операций сопоставления и поиска на основе этого регулярного выражения.

2. Как работает алгоритм поиска в Matcher жадно или лениво? Как можно добиться ленивого поиска?
    По умолчанию Matcher использует жадный алгоритм. Чтобы использовать ленивый алгоритм, нужно добавить вопросительный знак "?" в регулярном выражении.

3. Что содержит в себе PatternSyntaxException?
    PatternSyntaxException позволяет получить информацию о типе ошибки в синтаксисе регулярного выражения, а также о месте, где ошибка произошла.

4. Что означает . в регулярных выражениях? как сделать поиск по символу .? Как сделать поиск по \? когда применяется экранирование?
    Символ "." в регулярных выражениях означает "любой символ".
    Для того чтобы сделать поиск по точке "." нужно добавить обратный слэш: "\."
    Для того чтобы сделать поиск по символу "\", нужно экранировать сам обратный слеш дважды.
    Экранирование используется в регулярных выражениях для указания, что следующий символ должен рассматриваться как обычный символ, а не как специальный метасимвол со своим специальным значением.

5. За что отвечают символы *, +, ? {3,5}
    "*" - ноль или более повторений предшествующего элемента.
    "+" - один или более повторений предшествующего элемента.
    "?" - ноль или одно вхождение предшествующего элемента.
    {3,5} - от 3 до 5 повторений предшествующего элемента.

6. Как проверить совпадает ли вся строка указанному регулярному выражению?
    Можно использовать метод matches() класса String или matches() классов Pattern и Matcher.

7. Как исключить из поиска определенные символы?
    Можно использовать "[^здесь указываем, что нужно исключить]"

8. Как сделать именованную группу? ((A(B))(C)) что тут является группой 1, что группой 3? (посмотрите документацию Pattern, там есть объяснение похожего примера)
    Для создания именованной группы в регулярном выражении, используйте синтаксис (?<имя>выражение), где имя - желаемое имя для группы, а выражение - регулярное выражение, которое нужно сгруппировать и именовать.
    Группа 1: ((A(B))(C)), Группа 3: (A(B))

9. В чем преимущество у StringBuilder vs String?
    StringBuilder: изменяемость, более эффективен в использовании памяти и производительности, предоставляет методы для манипуляции строками.